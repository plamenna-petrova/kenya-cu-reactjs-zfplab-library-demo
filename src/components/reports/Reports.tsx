import { FC, useState } from "react";
import { Formik, FormikHelpers } from "formik";
import { H3, Paragraph } from '../layout/typography-elements/TypographyElements';
import { useDispatch } from "react-redux";
import { AppDispatch } from "../../store";
import { useFP } from '../../hooks/useFP';
import { toast } from 'react-toastify';
import { executeFPOperationWithLoading } from "../../utils/loadingUtils";
import { handleZFPLabServerError } from "../../utils/tremolLibraryUtils";
import { isNullOrWhitespace, generateExportFileName } from "../../utils/helperFunctions";
import { ElectronicJournalReportByZReportNumbersFormData } from "../../interfaces/electronic-journal-reports/ElectronicJournalReportByZReportNumbersFormData";
import {
  PRINT_DAILY_X_REPORT_LOADING_MESSAGE,
  PRINT_DAILY_Z_REPORT_LOADING_MESSAGE,
  READING_ELECTRONIC_JOURNAL_REPORT_BY_Z_REPORT_NUMBERS_LOADING_MESSAGE,
  REQUIRED_ELECTRONIC_JOURNAL_REPORT_STARTING_Z_REPORT_NUMBER_ERROR_MESSAGE,
  ELECTRONIC_JOURNAL_REPORT_STARTING_Z_REPORT_NUMBER_NOT_A_NUMBER_ERROR_MESSAGE,
  ELECTRONIC_JOURNAL_REPORT_STARTING_Z_REPORT_NUMBER_MAX_LENGTH_ERROR_MESSAGE,
  REQUIRED_ELECTRONIC_JOURNAL_REPORT_ENDING_Z_REPORT_NUMBER_ERROR_MESSAGE,
  ELECTRONIC_JOURNAL_REPORT_ENDING_Z_REPORT_NUMBER_NOT_A_NUMBER_ERROR_MESSAGE,
  ELECTRONIC_JOURNAL_REPORT_ENDING_Z_REPORT_NUMBER_MAX_LENGTH_ERROR_MESSAGE,
  ELECTRONIC_JOUNRAL_REPORT_STARTING_Z_REPORT_NUMBER_NOT_POSITIVE_ERROR_MESSAGE,
  ELECTRONIC_JOUNRAL_REPORT_ENDING_Z_REPORT_NUMBER_NOT_POSITIVE_ERROR_MESSAGE,
  ELECTRONIC_JOURNAl_REPORT_STARTING_Z_REPORT_NUMBER_GREATER_THAN_ENDING_NUMBER_ERROR_MESSAGE,
  NO_REPORT_CONTENT_ERROR_MESSAGE,
  SAVE_ELECTRONIC_JOURNAL_REPORT_TOOLTIP_TITLE,
  SAVED_EJ_REPORT_STARTING_FILE_NAME
} from '../../utils/constants';
import * as Yup from "yup";
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid2';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Button from '@mui/material/Button';
import Stack from '@mui/material/Stack';
import TextField from '@mui/material/TextField';
import Tooltip from '@mui/material/Tooltip';
import DraggableDetailsDialog from "../layout/draggable-details-dialog/DraggableDetailsDialog";
import SaveIcon from '@mui/icons-material/Save';
import Tremol from "../../assets/js/fp";

interface SaveElectronicJournalReportButtonProps {
  electronicJournalReportContent: string;
}

const SaveElectronicJournalReportButton: FC<SaveElectronicJournalReportButtonProps> = ({ electronicJournalReportContent }) => {
  /**
   * Saves the provided electronic journal report as a `.txt` file.
   * - Creates a blob from `electronicJournalReportContent` with a MIME type of `text/plain`.
   * - Generates a temporary anchor element:
   *   - Sets its `href` attribute to the blob's object URL.
   *   - Sets its `download` attribute to a file name generated by `generateExportFileName`, with a `.txt` extension.
   * - Clicks the anchor element programmatically to trigger the download, then revokes the blob's object URL.
   * 
   * @function saveElectronicJournalReportToTXTFile
   * @returns {void} This function does not return a value.
   */
  const saveElectronicJournalReportToTXTFile = (): void => {
    const blob: Blob = new Blob([electronicJournalReportContent], { type: 'text/plain' });
    const url: string = URL.createObjectURL(blob);
    const anchorElement: HTMLAnchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = generateExportFileName(SAVED_EJ_REPORT_STARTING_FILE_NAME, '.txt');
    anchorElement.click();
    URL.revokeObjectURL(url);
  }

  return (
    <Tooltip
      title={<Paragraph>{SAVE_ELECTRONIC_JOURNAL_REPORT_TOOLTIP_TITLE}</Paragraph>}
      placement="top"
      slotProps={{
        popper: {
          modifiers: [
            {
              name: 'offset',
              options: {
                offset: [0, -5]
              }
            }
          ]
        }
      }}
    >
      <Button startIcon={<SaveIcon />} onClick={saveElectronicJournalReportToTXTFile}>Save Report</Button>
    </Tooltip>
  )
}

const Reports: FC = () => {
  const [isReadElectronicJournalReportDraggableDialogOpen, setIsReadElectronicJournalReportDraggableDialogOpen] = useState<boolean>(false);
  const [readElectronicJournalReportDraggableDialogTitle, setReadElectronicJournalReportDraggableDialogTitle] = useState<string>('');
  const [readElectronicJournalReportDraggableDialogContent, setReadElectronicJournalReportDraggableDialogContent] = useState<string>('');
  const dispatch = useDispatch<AppDispatch>();
  const fp = useFP();

  const electronicJournalReportByZReportNumbersInitialFormValues: ElectronicJournalReportByZReportNumbersFormData = {
    startingZReportNumber: "",
    endingZReportNumber: ""
  }

  const electronicJournalReportByZReportNumbersValidationSchema = Yup.object().shape({
    startingZReportNumber: Yup
      .number()
      .required(REQUIRED_ELECTRONIC_JOURNAL_REPORT_STARTING_Z_REPORT_NUMBER_ERROR_MESSAGE)
      .typeError(ELECTRONIC_JOURNAL_REPORT_STARTING_Z_REPORT_NUMBER_NOT_A_NUMBER_ERROR_MESSAGE)
      .positive(ELECTRONIC_JOUNRAL_REPORT_STARTING_Z_REPORT_NUMBER_NOT_POSITIVE_ERROR_MESSAGE)
      .test(
        "startingZReportNumberLength",
        ELECTRONIC_JOURNAL_REPORT_STARTING_Z_REPORT_NUMBER_MAX_LENGTH_ERROR_MESSAGE,
        value => !!value && value.toString().length <= 4
      ),
    endingZReportNumber: Yup
      .number()
      .required(REQUIRED_ELECTRONIC_JOURNAL_REPORT_ENDING_Z_REPORT_NUMBER_ERROR_MESSAGE)
      .typeError(ELECTRONIC_JOURNAL_REPORT_ENDING_Z_REPORT_NUMBER_NOT_A_NUMBER_ERROR_MESSAGE)
      .positive(ELECTRONIC_JOUNRAL_REPORT_ENDING_Z_REPORT_NUMBER_NOT_POSITIVE_ERROR_MESSAGE)
      .test(
        "endingZReportNumberLength",
        ELECTRONIC_JOURNAL_REPORT_ENDING_Z_REPORT_NUMBER_MAX_LENGTH_ERROR_MESSAGE,
        value => !!value && value.toString().length <= 4
      ),
  });

  /**
   * Prints a daily fiscal report with zeroing.
   * - Initiates an asynchronous operation with a loading indicator.
   * - If an error occurs, shows an error toast with the error message.
   * 
   * @async
   * @function handlePrintDailyZReportClick
   * @returns {Promise<void>} A promise that resolves once the operation completes.
   */
  const handlePrintDailyZReportClick = async (): Promise<void> => {
    await executeFPOperationWithLoading(dispatch, async () => {
      try {
        await fp.DailyReport();
      } catch (error: unknown) {
        toast.error(handleZFPLabServerError(error));
      }
    }, PRINT_DAILY_Z_REPORT_LOADING_MESSAGE)
  }

  /**
   * Executes an electronic journal report read operation based on provided Z report numbers.
   * - If the Z report numbers validation fails, the `ReadEJByZBlocks` operation will not execute.
   * - Executes the `ReadEJByZBlocks` operation, followed by raw reading of the operation's bytes 
   *   and formatting them as a string using `rawReadAndFormatBytesToString`.
   * - If `electronicJournalReportByZReportNumbersContent` is provided (not `null` or whitespace), 
   *   the electronic journal report content is displayed in a dialog. Otherwise, an error toast with a relevant message is shown.
   * - If an error occurs, shows an error toast with the error message.
   * 
   * @async
   * @function handleReadElectronicJournalReportByZReportNumbers
   * @param {ElectronicJournalReportByZReportNumbersFormData} zReportNumbers - Object containing the Z report numbers range.
   * @param {string | number} zReportNumbers.startingZReportNumber - Starting Z report number.
   * @param {string | number} zReportNumbers.endingZReportNumber - Ending Z report number.
   * @param {FormikHelpers<ElectronicJournalReportByZReportNumbersFormData>['setSubmitting']} formikHelperFunctions - 
   * Formik helper functions for handling form state.
   * @param {function} formikHelperFunctions.setSubmitting - Formik function to control the form's submitting state.
   * @returns {Promise<void>} A promise that resolves once the operation completes.
   */
  const handleReadElectronicJournalReportByZReportNumbers = async (
    { startingZReportNumber, endingZReportNumber }: ElectronicJournalReportByZReportNumbersFormData,
    { setSubmitting }: { setSubmitting: FormikHelpers<ElectronicJournalReportByZReportNumbersFormData>['setSubmitting'] }
  ): Promise<void> => {
    const startingZReportNumberNumericalValue: number = Number(startingZReportNumber);
    const endingZReportNumberNumericalValue: number = Number(endingZReportNumber);

    if (startingZReportNumberNumericalValue > endingZReportNumberNumericalValue) {
      toast.error(ELECTRONIC_JOURNAl_REPORT_STARTING_Z_REPORT_NUMBER_GREATER_THAN_ENDING_NUMBER_ERROR_MESSAGE);
      return;
    }

    await executeFPOperationWithLoading(dispatch, async () => {
      try {
        await fp.ReadEJByZBlocks(startingZReportNumberNumericalValue, endingZReportNumberNumericalValue);
        const electronicJournalReportByZReportNumbersContent: string | null = await rawReadAndFormatBytesToString();

        if (!isNullOrWhitespace(electronicJournalReportByZReportNumbersContent)) {
          handleReadReportDraggableDialogOpen(
            `EJ Report By Z Report Numbers (${startingZReportNumber}, ${endingZReportNumber})`,
            electronicJournalReportByZReportNumbersContent as string
          );
        } else {
          toast.error(NO_REPORT_CONTENT_ERROR_MESSAGE);
        }
      } catch (error: unknown) {
        toast.error(handleZFPLabServerError(error));
      } finally {
        setSubmitting(false);
      }
    }, READING_ELECTRONIC_JOURNAL_REPORT_BY_Z_REPORT_NUMBERS_LOADING_MESSAGE);
  }

  /**
   * Reads raw bytes from the fiscal device and formats them as a string.
   * - Sends a raw read command to the fiscal device.
   * - Decodes the returned bytes using `windows-1252` text encoding and splits the decoded string by newline (`\n`).
   * - Formats each line by slicing and replacing special characters.
   * - Returns the final formatted result as a string.
   * - If an error occurs, shows an error toast with the error message and returns `null`.
   * 
   * @async
   * @function rawReadAndFormatBytesToString
   * @returns {Promise<string | null>} A formatted string from decoded bytes, or `null` if an error occurs.
   */
  const rawReadAndFormatBytesToString = async (): Promise<string | null> => {
    try {
      const rawReadBytes: Uint8Array = await fp.RawRead(0, "@");
      const decodedLines: string[] = new TextDecoder("windows-1252").decode(rawReadBytes).split("\n");

      let formattedResultString: string = "";

      for (let i = 0; i < decodedLines.length - 1; i++) {
        if (decodedLines[i] === "@") {
          continue;
        }

        let currentLineToProcess: string = decodedLines[i].slice(4, -2).replace(/\x7f/g, '.');

        formattedResultString += currentLineToProcess + "\r\n";
      }

      return formattedResultString;
    } catch (error: unknown) {
      toast.error(handleZFPLabServerError(error));
      return null;
    }
  }

  const handleReadReportDraggableDialogOpen = (draggableDialogTitle: string, draggableDialogContent: string): void => {
    setReadElectronicJournalReportDraggableDialogTitle(draggableDialogTitle);
    setReadElectronicJournalReportDraggableDialogContent(draggableDialogContent);
    setIsReadElectronicJournalReportDraggableDialogOpen(true);
  }

  const handleReadReportDraggableDialogClose = (): void => {
    setIsReadElectronicJournalReportDraggableDialogOpen(false);
  }

  return (
    <Box sx={{ width: '100%', height: '100%', px: 2 }}>
      <Grid container spacing={2}>
        <Grid size={{ xs: 12, lg: 3 }}>
          <Card>
            <CardContent>
              <H3 sx={{ color: 'text.secondary' }}>
                Reports
              </H3>
              <Stack spacing={2} sx={{ mt: 3 }}>
                <Button size="medium" variant="contained" sx={{ width: '100%' }} onClick={handlePrintDailyZReportClick}>
                  Daily Z Report
                </Button>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, lg: 3 }}>
          <Card>
            <CardContent>
              <H3 sx={{ color: 'text.secondary' }}>
                EJ Report By Z Report Numbers
              </H3>
              <Formik
                initialValues={electronicJournalReportByZReportNumbersInitialFormValues}
                validationSchema={electronicJournalReportByZReportNumbersValidationSchema}
                onSubmit={handleReadElectronicJournalReportByZReportNumbers}
              >
                {({
                  values,
                  errors,
                  touched,
                  handleChange,
                  handleBlur,
                  handleSubmit
                }) => {
                  return (
                    <form onSubmit={handleSubmit}>
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>
                        <TextField
                          label="Starting Number"
                          fullWidth
                          size="small"
                          type="text"
                          name="startingZReportNumber"
                          variant="outlined"
                          onBlur={handleBlur}
                          value={values.startingZReportNumber}
                          onChange={handleChange}
                          helperText={touched.startingZReportNumber && errors.startingZReportNumber}
                          error={Boolean(touched.startingZReportNumber && errors.startingZReportNumber)}
                        />
                        <TextField
                          label="Ending Number"
                          fullWidth
                          size="small"
                          type="text"
                          name="endingZReportNumber"
                          variant="outlined"
                          onBlur={handleBlur}
                          value={values.endingZReportNumber}
                          onChange={handleChange}
                          helperText={touched.endingZReportNumber && errors.endingZReportNumber}
                          error={Boolean(touched.endingZReportNumber && errors.endingZReportNumber)}
                        />
                        <Button type="submit" size="medium" variant="contained" sx={{ width: '100%' }}>
                          Read
                        </Button>
                      </Box>
                    </form>
                  )
                }}
              </Formik>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
      <DraggableDetailsDialog
        isDraggableDialogOpen={isReadElectronicJournalReportDraggableDialogOpen}
        onDraggableDialogClose={handleReadReportDraggableDialogClose}
        draggableDialogTitle={readElectronicJournalReportDraggableDialogTitle}
        draggableDialogContent={readElectronicJournalReportDraggableDialogContent}
        draggableDialogActionNode={
          <SaveElectronicJournalReportButton electronicJournalReportContent={readElectronicJournalReportDraggableDialogContent} />
        }
      />
    </Box>
  )
}

export default Reports;